{"version":3,"sources":["App.js","index.js"],"names":["App","useState","value","setValue","feels","setFeels","description","setDescription","iconId","setIconId","city","setCity","country","setCountry","notification","useRef","weather","temperature","unit","navigator","geolocation","getCurrentPosition","positions","latitude","coords","longitude","getWeather","error","current","innerHTML","message","hours","Date","getHours","KELVIN","key","a","api","axios","response","data","Math","floor","main","temp","feels_like","icon","name","sys","document","title","console","log","className","ref","src","alt","ReactDOM","render","getElementById"],"mappings":"gQA6GeA,MAzGf,WACC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KACA,EAA8BV,mBAAS,IAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACMC,EAAeC,iBAAO,MACxBC,EAAU,CACbC,YAAa,CACZC,KAAM,UACNhB,QACAE,SAEDE,cACAE,SACAE,OACAE,WAGG,gBAAiBO,WACpBA,UAAUC,YAAYC,oBAEvB,SAAqBC,GACpB,IAAIC,EAAWD,EAAUE,OAAOD,SAC5BE,EAAYH,EAAUE,OAAOC,WAzBpB,sCA2BbC,CAAWH,EAAUE,MAGtB,SAAmBE,GAClBb,EAAac,QAAQC,UAArB,aAAuCF,EAAMG,QAA7C,WAGD,IAAIC,GAAQ,IAAIC,MAAOC,WAEjBC,EAAS,IACTC,EAAM,mCArCE,4CAsCd,WAA0BZ,EAAUE,GAApC,mBAAAW,EAAA,6DACKC,EADL,8DACkEd,EADlE,gBACkFE,EADlF,kBACqGU,GADrG,kBAGyBG,EAAMD,GAH/B,OAGQE,EAHR,OAIQC,EAAOD,EAASC,KAEtBrC,EAASsC,KAAKC,MAAMF,EAAKG,KAAKC,KAAOV,IACrC7B,EAASoC,KAAKC,MAAMF,EAAKG,KAAKE,WAAaX,IAC3C3B,EAAeiC,EAAKxB,QAAQ,GAAGV,aAC/BG,EAAU+B,EAAKxB,QAAQ,GAAG8B,MAC1BnC,EAAQ6B,EAAKO,MACblC,EAAW2B,EAAKQ,IAAIpC,SAEpBqC,SAASC,MAAT,qBAA+BlC,EAAQN,MAbzC,kDAeEyC,QAAQC,IAAI,KAAItB,SAflB,2DAtCc,sBAyDd,OACC,sBAAKuB,UAAU,MAAf,UACC,oBAAIA,UAAU,WAAd,SACEtB,GAAS,GAAKA,GAAS,GACrB,qBACAA,GAAS,IAAMA,GAAS,GACxB,uBACAA,GAAS,IAAMA,GAAS,GACxB,qBACAA,GAAS,GAAKA,GAAS,EACvB,mBACA,uBAEJ,sBAAKsB,UAAU,YAAf,UACC,qBAAKA,UAAU,YAAf,SACC,4CAAerC,EAAQN,UAExB,qBAAK2C,UAAU,eAAeC,IAAKxC,IAGnC,sBAAKuC,UAAU,oBAAf,UACC,qBAAKA,UAAU,0BAAf,SACC,qBAAKE,IAAG,kBAAa/C,EAAb,QAA2BgD,IAAI,cAExC,qBAAKH,UAAU,uCAAf,SACC,8BACErC,EAAQC,YAAYf,MADtB,OAC6B,0CAG9B,qBAAKmD,UAAU,iCAAf,SACC,4CACarC,EAAQC,YAAYb,MADjC,OACwC,0CAGzC,qBAAKiD,UAAU,4CAAf,SACC,4BAAIrC,EAAQV,gBAEb,qBAAK+C,UAAU,8BAAf,SACC,8BACErC,EAAQN,KADV,KACkBM,EAAQJ,uBC/FhC6C,IAASC,OAAO,cAAC,EAAD,IAAST,SAASU,eAAe,W","file":"static/js/main.19541804.chunk.js","sourcesContent":["import './App.css';\nimport React, { useRef, useState } from 'react';\nimport * as axios from 'axios';\n\nfunction App() {\n\tconst [value, setValue] = useState('');\n\tconst [feels, setFeels] = useState('');\n\tconst [description, setDescription] = useState('');\n\tconst [iconId, setIconId] = useState('');\n\tconst [city, setCity] = useState('');\n\tconst [country, setCountry] = useState('');\n\tconst notification = useRef(null);\n\tlet weather = {\n\t\ttemperature: {\n\t\t\tunit: 'celsius',\n\t\t\tvalue,\n\t\t\tfeels,\n\t\t},\n\t\tdescription,\n\t\ticonId,\n\t\tcity,\n\t\tcountry,\n\t};\n\n\tif ('geolocation' in navigator) {\n\t\tnavigator.geolocation.getCurrentPosition(setPosition, showError);\n\t}\n\tfunction setPosition(positions) {\n\t\tlet latitude = positions.coords.latitude;\n\t\tlet longitude = positions.coords.longitude;\n\n\t\tgetWeather(latitude, longitude);\n\t}\n\n\tfunction showError(error) {\n\t\tnotification.current.innerHTML = `<p>${error.message}</p>`;\n\t}\n\n\tlet hours = new Date().getHours();\n\n\tconst KELVIN = 273;\n\tconst key = '96f6ba150dbfde1782395bffef95d6a2';\n\tasync function getWeather(latitude, longitude) {\n\t\tlet api = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\n\t\ttry {\n\t\t\tconst response = await axios(api);\n\t\t\tconst data = response.data;\n\n\t\t\tsetValue(Math.floor(data.main.temp - KELVIN));\n\t\t\tsetFeels(Math.floor(data.main.feels_like - KELVIN));\n\t\t\tsetDescription(data.weather[0].description);\n\t\t\tsetIconId(data.weather[0].icon);\n\t\t\tsetCity(data.name);\n\t\t\tsetCountry(data.sys.country);\n\n\t\t\tdocument.title = `Weather in ${weather.city}`;\n\t\t} catch (err) {\n\t\t\tconsole.log(err.message);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1 className='greeting'>\n\t\t\t\t{hours >= 5 && hours <= 12\n\t\t\t\t\t? 'Good Morning Denys'\n\t\t\t\t\t: hours >= 12 && hours <= 18\n\t\t\t\t\t? 'Good Afternoon Denys'\n\t\t\t\t\t: hours >= 18 && hours <= 23\n\t\t\t\t\t? 'Good Evening Denys'\n\t\t\t\t\t: hours >= 0 && hours <= 5\n\t\t\t\t\t? 'Good Night Denys'\n\t\t\t\t\t: 'Good Evening Denys'}\n\t\t\t</h1>\n\t\t\t<div className='container'>\n\t\t\t\t<div className='app-title'>\n\t\t\t\t\t<p>Weather in {weather.city}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='notification' ref={notification}>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div className='weather-container'>\n\t\t\t\t\t<div className='weather-container__icon'>\n\t\t\t\t\t\t<img src={`./icons/${iconId}.png`} alt='weather' />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='weather-container__temperature-value'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{weather.temperature.value}°<span>C</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='weather-container__feels-value'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tFeels like {weather.temperature.feels}°<span>C</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='weather-container__temperature-descripton'>\n\t\t\t\t\t\t<p>{weather.description}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='weather-container__location'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{weather.city}, {weather.country}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}